#!/usr/bin/env python
#
# Authors:
# rafael@postgresql.org.es / http://www.postgresql.org.es/
#
# Copyright (c) 2014-2015 USIT-University of Oslo
#
# This file is part of Zabbix-cli
# https://github.com/rafaelma/zabbix-cli
#
# Zabbix-CLI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Zabbix-CLI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Zabbix-CLI.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import getpass
import argparse

from zabbix_cli.config import *
from zabbix_cli.logs import * 
from zabbix_cli.cli import * 

if __name__ == '__main__':

    try:

        #
        # Processing command line parameters
        #

        output_format = ''
        config_file = ''
        zabbix_command = ''

        parser = argparse.ArgumentParser(prog=sys.argv[0],description='zabbix-cli - Zabbix client')

        parser.add_argument('--output','-o',  metavar='[csv|json|table]', choices=['csv','json','table'], required=False, dest='output_format')
        parser.add_argument('--config','-c', metavar='<config file>', required=False, dest='config_file')
        parser.add_argument('--command','-C', metavar='<Zabbix-cli command>',required=False,dest='zabbix_command')
        
        args = parser.parse_args()  
        
        if args.output_format:
            output_format = args.output_format 
        
        if args.config_file:
            config_file = args.config_file 
    
        if args.zabbix_command:
            zabbix_command = args.zabbix_command 

        conf = configuration(config_file)
                
        #
        # If logging is activated, start logging to the file defined
        # with log_file in the config file.
        #

        if conf.logging == 'ON':
            logs = log("zabbix-cli",config_file)
        else:
            logs = None
            
        if conf.logging == 'ON':
            logs.logger.debug('**** Zabbix-CLI startet. ****')

        #
        # Non-interactive authentication procedure
        # 
        # If the file .zabbix_cli_auth exists at $HOME, use the
        # information in this file to authenticate into Zabbix API
        #
        # Format:
        # <Zabbix username>::<password>
        #
        # Use .zabbix-cli_auth_token if it exists and .zabbix_cli_auth
        # does not exist.
        #
        # Format:
        # <Zabbix username>::<API-token>
        #

        auth_token = ''
        username = ''
        password = ''

        zabbix_auth_file = os.getenv('HOME') + '/.zabbix-cli_auth'
        zabbix_auth_token_file = os.getenv('HOME') + '/.zabbix-cli_auth_token'

        if os.path.isfile(zabbix_auth_file):

            try:
                os.chmod(zabbix_auth_file,0400)
            
                with open(zabbix_auth_file,'r') as file:
                    for line in file:
                        (username, password) = line.split('::')

                password = password.replace('\n','')
                
                if conf.logging == 'ON':
                    logs.logger.debug('File %s exists. Using this file to get authentication information',zabbix_auth_file)

            except Exception as e:
                print '\n[ERROR]: %s\n',e

                if conf.logging == 'ON':
                    logs.logger.error('Problems using file %s - %s',zabbix_auth_file,e)

        elif os.path.isfile(zabbix_auth_token_file):

            try:
                os.chmod(zabbix_auth_token_file,0600)
            
                with open(zabbix_auth_token_file,'r') as file:
                    for line in file:
                        (username, auth_token) = line.split('::')
                
                if conf.logging == 'ON':
                    logs.logger.info('File %s exists. Using this file to get authentication token information',zabbix_auth_token_file)

            except Exception as e:
                print '\n[ERROR]: %s\n',e

                if conf.logging == 'ON':
                    logs.logger.error('Problems using file %s - %s',zabbix_auth_token_file,e)


        #
        # Interactive authentication procedure
        #
 
        else:

            default_user = getpass.getuser()
            
            print '-------------------------'
            print 'Zabbix-CLI authentication'
            print '-------------------------'
        
            try:
                username = raw_input('# Username[' + default_user +']: ')
                password = getpass.getpass('# Password: ')
            
            except Exception as e:
                print '\n[Aborted]'
                sys.exit(0)

            if username == '':
                username = default_user


        #
        # Check that username and password have some values if the
        # API-auth-token is empty ($HOME/.zabbix-cli_auth_token does
        # not exist)
        #
        
        if auth_token == '':

            if username == '' or password == '':
                print '\n[ERROR]: Username or password is empty\n'
                                    
                if conf.logging == 'ON':
                    logs.logger.error('Username or password is empty')
                
                sys.exit(1)
                
        if conf.logging == 'ON':
         
            #
            # Activate the username information in the log
            # name as soon as we have this information
            #
            
            logs.formatter = logging.Formatter("%(asctime)s [%(name)s][" +  username + "][%(process)d][%(levelname)s]: %(message)s")
            logs.fh.setFormatter(logs.formatter)
            logs.logger.addHandler(logs.fh)


        #
        # Zabbix-CLI in interactive modus
        # 

        if zabbix_command == '':

            if conf.logging == 'ON':
                logs.logger.debug('Zabbix-CLI running in interactive modus')
        
            os.system('clear')
            
            cli = zabbixcli(logs,conf,username,password,auth_token)

            cli.cmdloop()
            
        #
        # Zabbix-CLI in non-interactive modus(command line)
        # 
        
        elif zabbix_command != '':
            
            if conf.logging == 'ON':
                logs.logger.debug('Zabbix-CLI running in non-interactive modus')
            
            # CSV format output
                
            if output_format == 'csv':
                
                cli = zabbixcli(logs,conf,username,password,auth_token)
                cli.output_format = 'csv'
                              
                cli.onecmd(zabbix_command)

            # JSON format output
            
            elif output_format == 'json':
                
                cli = zabbixcli(logs,conf,username,password,auth_token)
                cli.output_format = 'json'
                              
                cli.onecmd(zabbix_command)

            # Table format output

            else:
                cli = zabbixcli(logs,conf,username,password,auth_token)
                cli.output_format = 'table'
                                
                cli.onecmd(zabbix_command)

        else:
            raise NotImplementedError
            
        if conf.logging == 'ON':
            logs.logger.debug('**** Zabbix-CLI stopped. ****')
        
    except KeyboardInterrupt:
        print
        print "\nDone, thank you for using Zabbix-CLI"
        
        if conf.logging == 'ON':
            logs.logger.debug('**** Zabbix-CLI stopped. ****')

        sys.exit(0)


